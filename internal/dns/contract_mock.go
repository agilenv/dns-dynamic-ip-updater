// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package dns is a generated GoMock package.
package dns

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDNSProvider is a mock of DNSProvider interface.
type MockDNSProvider struct {
	ctrl     *gomock.Controller
	recorder *MockDNSProviderMockRecorder
}

// MockDNSProviderMockRecorder is the mock recorder for MockDNSProvider.
type MockDNSProviderMockRecorder struct {
	mock *MockDNSProvider
}

// NewMockDNSProvider creates a new mock instance.
func NewMockDNSProvider(ctrl *gomock.Controller) *MockDNSProvider {
	mock := &MockDNSProvider{ctrl: ctrl}
	mock.recorder = &MockDNSProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDNSProvider) EXPECT() *MockDNSProviderMockRecorder {
	return m.recorder
}

// GetRecord mocks base method.
func (m *MockDNSProvider) GetRecord(name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecord", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecord indicates an expected call of GetRecord.
func (mr *MockDNSProviderMockRecorder) GetRecord(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecord", reflect.TypeOf((*MockDNSProvider)(nil).GetRecord), name)
}

// UpdateRecord mocks base method.
func (m *MockDNSProvider) UpdateRecord(name, ip string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecord", name, ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRecord indicates an expected call of UpdateRecord.
func (mr *MockDNSProviderMockRecorder) UpdateRecord(name, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecord", reflect.TypeOf((*MockDNSProvider)(nil).UpdateRecord), name, ip)
}

// MockTrackRepository is a mock of TrackRepository interface.
type MockTrackRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTrackRepositoryMockRecorder
}

// MockTrackRepositoryMockRecorder is the mock recorder for MockTrackRepository.
type MockTrackRepositoryMockRecorder struct {
	mock *MockTrackRepository
}

// NewMockTrackRepository creates a new mock instance.
func NewMockTrackRepository(ctrl *gomock.Controller) *MockTrackRepository {
	mock := &MockTrackRepository{ctrl: ctrl}
	mock.recorder = &MockTrackRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrackRepository) EXPECT() *MockTrackRepositoryMockRecorder {
	return m.recorder
}

// LastEvent mocks base method.
func (m *MockTrackRepository) LastEvent() (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastEvent")
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastEvent indicates an expected call of LastEvent.
func (mr *MockTrackRepositoryMockRecorder) LastEvent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastEvent", reflect.TypeOf((*MockTrackRepository)(nil).LastEvent))
}

// Save mocks base method.
func (m *MockTrackRepository) Save(stats interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", stats)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockTrackRepositoryMockRecorder) Save(stats interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockTrackRepository)(nil).Save), stats)
}

// MockPublicIPAPI is a mock of PublicIPAPI interface.
type MockPublicIPAPI struct {
	ctrl     *gomock.Controller
	recorder *MockPublicIPAPIMockRecorder
}

// MockPublicIPAPIMockRecorder is the mock recorder for MockPublicIPAPI.
type MockPublicIPAPIMockRecorder struct {
	mock *MockPublicIPAPI
}

// NewMockPublicIPAPI creates a new mock instance.
func NewMockPublicIPAPI(ctrl *gomock.Controller) *MockPublicIPAPI {
	mock := &MockPublicIPAPI{ctrl: ctrl}
	mock.recorder = &MockPublicIPAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublicIPAPI) EXPECT() *MockPublicIPAPIMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockPublicIPAPI) Get() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPublicIPAPIMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPublicIPAPI)(nil).Get))
}
