// Code generated by MockGen. DO NOT EDIT.
// Source: updater.go

// Package dns is a generated GoMock package.
package dns

import (
	reflect "reflect"

	track "github.com/agilenv/linkip/internal/dns/track"
	gomock "github.com/golang/mock/gomock"
)

// MockStatsUsecase is a mock of StatsUsecase interface.
type MockStatsUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockStatsUsecaseMockRecorder
}

// MockStatsUsecaseMockRecorder is the mock recorder for MockStatsUsecase.
type MockStatsUsecaseMockRecorder struct {
	mock *MockStatsUsecase
}

// NewMockStatsUsecase creates a new mock instance.
func NewMockStatsUsecase(ctrl *gomock.Controller) *MockStatsUsecase {
	mock := &MockStatsUsecase{ctrl: ctrl}
	mock.recorder = &MockStatsUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatsUsecase) EXPECT() *MockStatsUsecaseMockRecorder {
	return m.recorder
}

// LastExecution mocks base method.
func (m *MockStatsUsecase) LastExecution() *track.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastExecution")
	ret0, _ := ret[0].(*track.Event)
	return ret0
}

// LastExecution indicates an expected call of LastExecution.
func (mr *MockStatsUsecaseMockRecorder) LastExecution() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastExecution", reflect.TypeOf((*MockStatsUsecase)(nil).LastExecution))
}

// Save mocks base method.
func (m *MockStatsUsecase) Save(event track.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockStatsUsecaseMockRecorder) Save(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockStatsUsecase)(nil).Save), event)
}
